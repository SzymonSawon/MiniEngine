package engine

import "vendor:glfw"
import gl "vendor:OpenGL"
import "core:time"
import "core:image"
import "core:math"
import "core:fmt"
import "core:os"
import "base:runtime"
import "core:math/linalg"
import "core:strings"
import "core:strconv"
import "core:mem"
import png "core:image/png"




read_shader :: proc(filepath: string) -> string{
	data, ok := os.read_entire_file(filepath, context.allocator)
	if !ok {
        fmt.print("Couldnt read file")
		return ""
	}
	defer delete(data, context.allocator)

    it := string(data)
    shader_text :string= ""
	for line in strings.split_lines_iterator(&it) {
        shader_text = strings.join({shader_text,line}, "")
        shader_text = strings.join({shader_text,"\n"}, "")
    }
    return shader_text
}



VAO :: u32
VBO :: u32
EBO :: u32
PROGRAM :: u32
TEXTURE :: u32

fixed_dt: f32 = 1.0 / 60.0
accumulator: f32 = 0.0
last_time: f32 = 0.0

window: glfw.WindowHandle
system: System
camera_obj: Object
heart_object: Object
sun_object: Object
sun_object_2: Object
heart_object_vao, sun_object_vao, sun_object_vao_2: VAO
heart_object_texture, sun_object_texture, sun_object_texture_2: u32
camera_speed: f32 = 1.0

watch: time.Stopwatch

mouse_x, mouse_y: f64
last_mouse_posx, last_mouse_posy: f64

main :: proc() {
    glfw.Init()
    defer glfw.Terminate()

    glfw.WindowHint(glfw.CONTEXT_VERSION_MAJOR, 3)
    glfw.WindowHint(glfw.CONTEXT_VERSION_MINOR, 3)
    glfw.WindowHint(glfw.OPENGL_PROFILE, glfw.OPENGL_CORE_PROFILE)

    window = glfw.CreateWindow(1920, 1080, "MINI GAME ENGINE", nil, nil)
    assert(window != nil)
    defer glfw.DestroyWindow(window)
    
    glfw.MakeContextCurrent(window)
    glfw.SwapInterval(1)

    gl.load_up_to(3,3, glfw.gl_set_proc_address)


    gl.Enable(gl.BLEND)
    gl.BlendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA)

    tex_sun_vertex_shader   := string(#load("shaders/texture_no_l_v.glsl"  ))
    tex_sun_fragment_shader := string(#load("shaders/texture_no_l_f.glsl"))

    tex_sun_program, tex_sun_program_ok := gl.load_shaders_source(tex_sun_vertex_shader, tex_sun_fragment_shader)
    tex_sun_shader_locations :[dynamic]u32
    tex_sun_shader: Shader = {tex_sun_program, tex_sun_shader_locations}

    tex_vertex_shader   := string(#load("shaders/texture_v.glsl"  ))
    tex_fragment_shader := string(#load("shaders/texture_f.glsl"))

    tex_program, tex_sun_program_ok := gl.load_shaders_source(tex_sun_vertex_shader, tex_sun_fragment_shader)
    tex_shader_locations :[dynamic]u32
    tex_shader: Shader = {tex_sun_program, tex_sun_shader_locations}
    
    heart_object = init_model_object(
        "./models/sun.obj",
        linalg.Vector3f32{0.0, 2.0, 0.0},
        linalg.Vector3f32{0.0, 0.0, 0.0},
        linalg.Vector3f32{1.0, 1.0, 1.0},
        &tex_sun_shader
    ) 

    sun_object = init_model_object(
        "./models/sun.obj",
        linalg.Vector3f32{0.0, 2.0, 0.0},
        linalg.Vector3f32{0.0, 0.0, 0.0},
        linalg.Vector3f32{1.0, 1.0, 1.0},
        &tex_sun_shader
    )
    model_data := sun_object.model_data^
    sun_object_vao, sun_object_texture = setup_model_object(model_data, "./models/textures/")
    append(&model_data.material.textures, sun_object_texture)
    sun_object.model_data = &model_data

    sun_object_2 = init_model_object(
        "./models/sun.obj",
        linalg.Vector3f32{0.0, 2.0, 0.0},
        linalg.Vector3f32{0.0, 0.0, 0.0},
        linalg.Vector3f32{1.0, 1.0, 1.0},
        &tex_sun_shader
    )
    model_data_2 := sun_object.model_data^
    sun_object_vao_2, sun_object_texture_2 = setup_model_object(model_data_2, "./models/textures/")
    append(&model_data_2.material.textures, sun_object_texture_2)
    sun_object_2.model_data = &model_data_2
    scale_object(&sun_object_2, {50.0, 2.0, 50.0})
    move_object(&sun_object_2, {0.0, -10.0, 0.0})


    width, height: i32
    width, height = glfw.GetFramebufferSize(window)
    ratio: = f32(system.width) / f32(system.height)

    frames := make([dynamic]Frame, 0)
    append(&frames, Frame{
        t = 0.0,
        position = linalg.Vector3f32{0, 0, -10.0},
        rotation = linalg.Vector3f32{0, 0, 0},
        scale    = linalg.Vector3f32{1, 1, 1},
    })
    append(&frames, Frame{
        t = 1.0,
        position = linalg.Vector3f32{0, 0, -10.0},
        rotation = linalg.Vector3f32{0, 1.57, 0},
        scale    = linalg.Vector3f32{0.1, 0.1, 0.1},
    })
    append(&frames, Frame{
        t = 2.0,
        position = linalg.Vector3f32{0, 0, -10.0},
        rotation = linalg.Vector3f32{0, 3.14, 0},
        scale    = linalg.Vector3f32{0.01, 0.01, 0.01},
    })
    append(&frames, Frame{
        t = 3.0,
        position = linalg.Vector3f32{0, 0, -10.0},
        rotation = linalg.Vector3f32{0, 4.71, 0}, // ~270 stopni
        scale    = linalg.Vector3f32{0.01, 0.01, 0.01},
    })

    my_anim := Animation{
        animation_time = 0.0,
        frames = frames,
    }
    sun_object.animation = &my_anim



    m,p,mvp,v :linalg.Matrix4x4f32
    camera_obj = init_camera_object(
                {2.0,0.0,3.0},
                {1.0,0.0,1.0},
                {1.0,0.0,1.0},
                )
    system = {
        &camera_obj,
        mvp,
        width,
        height,
        v,
        p,
    }

    gl.Enable(gl.DEPTH_TEST)
    move_object(&sun_object, {0.0, 0.0, -10.0})
    add_child_to_parent(&camera_obj, &sun_object)
    tex_program_ok      : bool
    tex_vertex_shader   := string(#load("shaders/texture_v.glsl"  ))
    tex_fragment_shader := string(#load("shaders/texture_f.glsl"))

    tex_nl_program_ok      : bool
    tex_nl_vertex_shader   := string(#load("shaders/texture_no_l_v.glsl"  ))
    tex_nl_fragment_shader := string(#load("shaders/texture_no_l_f.glsl"))

    sun_object.shader.program, tex_nl_program_ok = gl.load_shaders_source(tex_nl_vertex_shader, tex_nl_fragment_shader)

    if !tex_nl_program_ok {
        fmt.println("ERROR: Failed to load and compile shaders."); os.exit(1)
    }

    

    glfw.SetCursorPosCallback(window, mouse_callback)
    time.stopwatch_start(&watch)
    camera_speed : f32 = 1
    last_mouse_posx: f64 = mouse_x
    last_mouse_posy: f64 = mouse_y
    last_secs :f32
    //glfw.SetInputMode(window,glfw.CURSOR, glfw.CURSOR_DISABLED)
    for !glfw.WindowShouldClose(window) {
        raw_duration := time.stopwatch_duration(watch)
        current_time := f32(time.duration_seconds(raw_duration))
        delta_time := current_time - last_time
        last_time = current_time

        accumulator += delta_time

        for accumulator >= fixed_dt {
            accumulator -= fixed_dt
            update_world(fixed_dt)
        }
        render_scene()
    }
}


mouse_callback :: proc "c" (window: glfw.WindowHandle, xpos, ypos: f64){
    mouse_x = xpos
    mouse_y = ypos
}

update_world :: proc(dt: f32) {
    movement: linalg.Vector4f32 = {0,0,0,0}
    if glfw.GetKey(window, glfw.KEY_W) == glfw.PRESS {
        movement[2] -= camera_speed
    }
    if glfw.GetKey(window, glfw.KEY_S) == glfw.PRESS {
        movement[2] += camera_speed
    }
    if glfw.GetKey(window, glfw.KEY_A) == glfw.PRESS {
        movement[0] -= camera_speed
    }
    if glfw.GetKey(window, glfw.KEY_D) == glfw.PRESS {
        movement[0] += camera_speed
    }
    if glfw.GetKey(window, glfw.KEY_ESCAPE) == glfw.PRESS {
        glfw.SetWindowShouldClose(window, glfw.TRUE)
    }
    system.camera.yaw   += (f32(mouse_x) - f32(last_mouse_posx)) * 0.01
    system.camera.pitch += (f32(mouse_y) - f32(last_mouse_posy)) * 0.01
    last_mouse_posx = mouse_x
    last_mouse_posy = mouse_y

    system.camera.pitch = clamp(system.camera.pitch, -0.5*math.PI, 0.5*math.PI)

    move_rotation: = linalg.identity_matrix(linalg.Matrix4x4f32)
    move_rotation = linalg.matrix4_rotate_f32(-system.camera.pitch, linalg.Vector3f32{1,0,0}) * move_rotation
    move_rotation = linalg.matrix4_rotate_f32(-system.camera.yaw,   linalg.Vector3f32{0,1,0}) * move_rotation

    rotated_movement: linalg.Vector4f32 = move_rotation * movement
    system.camera.position += linalg.Vector3f32{
        rotated_movement[0],
        rotated_movement[1],
        rotated_movement[2]
    }

    system.camera.m = make_local_matrix(
        system.camera.position,
        linalg.Vector3f32{-system.camera.pitch, -system.camera.yaw, 0},
        linalg.Vector3f32{1,1,1}
    )
    update_world_matrix(system.camera)
    play_animation(&sun_object, dt)
    update_world_matrix(&sun_object_2)
}

render_scene :: proc() {
    gl.Viewport(0, 0, system.width, system.height)
    gl.Clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)

    system.v = linalg.matrix4_inverse_f32(system.camera.w)
    ratio: = f32(system.width) / f32(system.height)
    system.p = linalg.matrix4_perspective_f32(system.camera.fov, ratio, 0.1, 400.0)

    draw_model_object(&sun_object, &system, sun_object_vao, 0, sun_object.position)
    draw_model_object(&sun_object_2, &system, sun_object_vao_2, 0, sun_object_2.position)

    glfw.SwapBuffers(window)
    glfw.PollEvents()
}
